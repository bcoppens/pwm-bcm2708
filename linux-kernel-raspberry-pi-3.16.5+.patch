diff --git a/arch/arm/mach-bcm2708/bcm2708_gpio.c b/arch/arm/mach-bcm2708/bcm2708_gpio.c
index 86cafa7..d90e3db 100644
--- a/arch/arm/mach-bcm2708/bcm2708_gpio.c
+++ b/arch/arm/mach-bcm2708/bcm2708_gpio.c
@@ -42,12 +42,6 @@
 #define GPIOUD(x)    (0x94+(x)*4)
 #define GPIOUDCLK(x) (0x98+(x)*4)
 
-enum { GPIO_FSEL_INPUT, GPIO_FSEL_OUTPUT,
-	GPIO_FSEL_ALT5, GPIO_FSEL_ALT_4,
-	GPIO_FSEL_ALT0, GPIO_FSEL_ALT1,
-	GPIO_FSEL_ALT2, GPIO_FSEL_ALT3,
-};
-
 	/* Each of the two spinlocks protects a different set of hardware
 	 * regiters and data structurs. This decouples the code of the IRQ from
 	 * the GPIO code. This also makes the case of a GPIO routine call from
@@ -65,8 +59,8 @@ struct bcm2708_gpio {
 	unsigned long low[(BCM2708_NR_GPIOS + 31) / 32];
 };
 
-static int bcm2708_set_function(struct gpio_chip *gc, unsigned offset,
-				int function)
+int bcm2708_set_function(struct gpio_chip *gc, unsigned offset,
+				bcm2708_gpio_alt_function_t function)
 {
 	struct bcm2708_gpio *gpio = container_of(gc, struct bcm2708_gpio, gc);
 	unsigned long flags;
@@ -90,6 +84,8 @@ static int bcm2708_set_function(struct gpio_chip *gc, unsigned offset,
 	return 0;
 }
 
+EXPORT_SYMBOL(bcm2708_set_gpio_function);
+
 static int bcm2708_gpio_dir_in(struct gpio_chip *gc, unsigned offset)
 {
 	return bcm2708_set_function(gc, offset, GPIO_FSEL_INPUT);
diff --git a/include/linux/platform_data/bcm2708.h b/include/linux/platform_data/bcm2708.h
index fb69624..b842602 100644
--- a/include/linux/platform_data/bcm2708.h
+++ b/include/linux/platform_data/bcm2708.h
@@ -20,4 +20,15 @@ typedef enum {
 extern int bcm2708_gpio_setpull(struct gpio_chip *gc, unsigned offset,
 		bcm2708_gpio_pull_t value);
 
+typedef enum { GPIO_FSEL_INPUT, GPIO_FSEL_OUTPUT,
+  GPIO_FSEL_ALT5, GPIO_FSEL_ALT_4,
+  GPIO_FSEL_ALT0, GPIO_FSEL_ALT1,
+  GPIO_FSEL_ALT2, GPIO_FSEL_ALT3,
+} bcm2708_gpio_alt_function_t;
+
+struct gpio_chip;
+extern int bcm2708_set_function(struct gpio_chip *gc, unsigned offset,
+				bcm2708_gpio_alt_function_t function);
+
+
 #endif
